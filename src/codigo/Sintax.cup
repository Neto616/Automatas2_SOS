package codigo;

import java_cup.runtime.Symbol;

parser code
{:  
    public String RESULT = "";
    public static Semantica sem = new Semantica();
    private Symbol s;

    public void setSemantica(Semantica sem) {
        this.sem = sem;
    }
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:};

terminal entero, decimal, string, bool, igual, suma, resta, division;
terminal producto, menorQue, mayorQue, menorIgual, mayorIgual, comillaSimple, punto;
terminal y, o, no, igualA, diferenteA, verdadero, falso, finLinea, imprimir;
terminal comillaDoble, parentesisA, parentesisC, llaveA;
terminal llaveC, funcMain, si, sino, cicloMientras, letra, numero;
terminal numeroDecimal, tipoStr, coma;

non terminal MAIN, CODIGO, IDE, TIPO_NUMERICOS, TIPO_DATOS, VALORES_BOOL;
non terminal VALORES_NUMERICOS, VALORES, DECLARACION, COMPARADORES, OPERADORES_LOGICOS;
non terminal COMPARACIONES, COMPARACIONES_II, COMPARACIONES_III, DECISION, DECISION_NO, MIENTRAS;
non terminal OPERADORES, OPERANDO, OPERACION, EXPRESION, IMPRIMIR, CONTENIDO;

start with MAIN;

MAIN ::= funcMain parentesisA parentesisC llaveA CODIGO llaveC {: Sintax.sem.vaciarTabla(); :};

CODIGO ::= DECLARACION CODIGO
| DECISION CODIGO
| MIENTRAS CODIGO
| EXPRESION CODIGO
| IMPRIMIR CODIGO
| /**/;

IDE ::= letra:l {: RESULT= l; :};

TIPO_NUMERICOS ::= entero {: RESULT= "entero"; :} 
              | decimal {: RESULT= "decimal"; :};

TIPO_DATOS ::= TIPO_NUMERICOS:r {: RESULT= r.toString(); :} 
              | string {: RESULT= "string"; :}
              | bool {: RESULT= "bool"; :};

VALORES_BOOL ::= verdadero {: RESULT = "verdadero"; :} 
              | falso {: RESULT= "falso"; :};

VALORES_NUMERICOS ::= numeroDecimal:n {: RESULT = n; :} 
              | numero:n {: RESULT = n; :};

VALORES ::= VALORES_NUMERICOS:n {: RESULT= n; :} 
              | tipoStr:n {: RESULT= n; :} 
              | letra:n {: RESULT=n; :} 
              | VALORES_BOOL:n {: RESULT=n; :};

DECLARACION ::= TIPO_DATOS:d IDE:i igual EXPRESION:e {: 
        try{
            Sintax.sem.verifVariable(d.toString(), i.toString(), e.toString());
        }catch(ErrorSemantica err){
            System.err.println("Error xd: "+ err.getMessage());
        }
    :};

COMPARADORES ::= menorQue {: RESULT= "<"; :} 
              | mayorQue {: RESULT= ">"; :}
              | menorIgual {: RESULT= "<="; :}
              | mayorIgual {: RESULT= ">="; :}
              | igualA {: RESULT= "=="; :}
              | diferenteA {: RESULT= "!="; :};

OPERADORES_LOGICOS ::= y {: RESULT= "&"; :}
                  | o {: RESULT= "|"; :}
                  | no {: RESULT= "!"; :};

COMPARACIONES ::= VALORES:n COMPARACIONES_II:cII COMPARACIONES_III:cIII {: RESULT = n.toString()+cII.toString()+cIII.toString(); :}
                  | parentesisA:pA VALORES:n COMPARACIONES_II:cII COMPARACIONES_III:c parentesisC:pC COMPARACIONES_III:c2 {: RESULT= pA.toString()+n.toString()+cII.toString()+c.toString()+pC.toString()+c2.toString(); :};

COMPARACIONES_II ::= COMPARADORES:c VALORES:n {: RESULT= c.toString() + n.toString(); :}
                  | /**/ {: RESULT= ""; :};

COMPARACIONES_III ::= OPERADORES_LOGICOS:n COMPARACIONES:c {: RESULT= n.toString()+c.toString(); :}
                  | /**/ {: RESULT= ""; :};

DECISION ::= si:s parentesisA:pA COMPARACIONES:c parentesisC:pC llaveA:lA CODIGO llaveC:lC DECISION_NO 
{: System.out.println(s.toString() + pA.toString() + c.toString() + pC.toString() + lA.toString() + " CODIGO "+lC.toString()); :};

DECISION_NO ::= sino llaveA CODIGO llaveC 
                  | /**/;

MIENTRAS ::= cicloMientras parentesisA COMPARACIONES parentesisC llaveA CODIGO llaveC;

EXPRESION ::= OPERANDO:n {: RESULT= n; :} 
              |finLinea;

OPERANDO ::= VALORES:n OPERACION:o {: RESULT= Sintax.sem.operando(n.toString(), o.toString()); :}
            | VALORES:n {: RESULT= n; :};

OPERACION ::= OPERADORES:o EXPRESION:e {: 
            try{
                RESULT= Sintax.sem.operacion(o.toString(), e.toString());
            }catch(ErrorSemantica err){
                System.err.println("Error xd: "+ err.getMessage());
            } 
:};

OPERADORES ::= suma     {: RESULT= "+"; :}
             | resta    {: RESULT= "-"; :}
             | division {: RESULT= "/"; :}
             | producto {: RESULT= "*"; :};

IMPRIMIR ::= imprimir parentesisA CONTENIDO:c parentesisC finLinea {: System.out.println("La impresi√≥n de este print es: "+c); :};

CONTENIDO ::= comillaDoble letra:v comillaDoble {: RESULT= v; :}
              | EXPRESION:v {: RESULT= v; :};
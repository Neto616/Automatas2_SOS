
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 28 10:37:19 CST 2024
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 28 10:37:19 CST 2024
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\010\000\002\003" +
    "\005\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\014\003\000\002\014\003\000" +
    "\002\015\003\000\002\015\003\000\002\004\003\000\002" +
    "\005\007\000\002\005\007\000\002\005\007\000\002\005" +
    "\007\000\002\006\006\000\002\006\006\000\002\006\006" +
    "\000\002\006\006\000\002\007\004\000\002\007\004\000" +
    "\002\007\002\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\007" +
    "\000\002\010\007\000\002\010\007\000\002\010\007\000" +
    "\002\010\006\000\002\010\003\000\002\011\011\000\002" +
    "\011\006\000\002\012\003\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\013\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\040\004\001\002\000\004\034\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\035\010\001\002\000\004\036\011\001\002\000" +
    "\024\004\022\005\014\006\016\007\012\031\015\037\ufffb" +
    "\041\013\042\024\047\021\001\002\000\004\043\035\001" +
    "\002\000\004\034\201\001\002\000\004\043\035\001\002" +
    "\000\004\034\104\001\002\000\004\043\035\001\002\000" +
    "\004\037\100\001\002\000\004\030\076\001\002\000\004" +
    "\034\041\001\002\000\004\043\035\001\002\000\024\004" +
    "\022\005\014\006\016\007\012\031\015\037\ufffb\041\013" +
    "\042\024\047\021\001\002\000\004\036\031\001\002\000" +
    "\024\004\022\005\014\006\016\007\012\031\015\037\ufffb" +
    "\041\013\042\024\047\021\001\002\000\024\004\022\005" +
    "\014\006\016\007\012\031\015\037\ufffb\041\013\042\024" +
    "\047\021\001\002\000\004\037\ufffe\001\002\000\004\037" +
    "\ufffd\001\002\000\024\004\022\005\014\006\016\007\012" +
    "\031\015\037\ufffb\041\013\042\024\047\021\001\002\000" +
    "\004\037\033\001\002\000\024\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\031\uffdb\037\uffdb\041\uffdb\042\uffdb\047\uffdb\001" +
    "\002\000\004\037\ufffc\001\002\000\022\010\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\030\ufff6\034\ufff6\035\ufff6\001" +
    "\002\000\004\010\037\001\002\000\004\044\040\001\002" +
    "\000\004\030\ufff1\001\002\000\014\026\042\027\047\044" +
    "\043\045\050\046\051\001\002\000\006\030\ufff8\035\ufff8" +
    "\001\002\000\034\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\024\ufffa\025\ufffa\030\ufffa" +
    "\034\ufffa\035\ufffa\001\002\000\004\035\uffda\001\002\000" +
    "\004\035\072\001\002\000\016\015\061\016\063\017\056" +
    "\020\060\024\057\025\062\001\002\000\006\030\ufff7\035" +
    "\ufff7\001\002\000\034\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\024\ufff9\025\ufff9\030" +
    "\ufff9\034\ufff9\035\ufff9\001\002\000\006\024\052\025\053" +
    "\001\002\000\004\046\055\001\002\000\004\046\054\001" +
    "\002\000\004\035\uffd3\001\002\000\004\035\uffd5\001\002" +
    "\000\006\044\043\045\050\001\002\000\006\044\043\045" +
    "\050\001\002\000\006\044\043\045\050\001\002\000\006" +
    "\044\043\045\050\001\002\000\006\044\043\045\050\001" +
    "\002\000\006\044\043\045\050\001\002\000\004\035\uffd9" +
    "\001\002\000\004\035\uffd2\001\002\000\004\035\uffd8\001" +
    "\002\000\004\035\uffd6\001\002\000\004\035\uffd4\001\002" +
    "\000\004\035\uffd7\001\002\000\004\036\073\001\002\000" +
    "\024\004\022\005\014\006\016\007\012\031\015\037\ufffb" +
    "\041\013\042\024\047\021\001\002\000\004\037\075\001" +
    "\002\000\024\004\uffd1\005\uffd1\006\uffd1\007\uffd1\031\uffd1" +
    "\037\uffd1\041\uffd1\042\uffd1\047\uffd1\001\002\000\024\004" +
    "\022\005\014\006\016\007\012\031\015\037\ufffb\041\013" +
    "\042\024\047\021\001\002\000\004\037\uffff\001\002\000" +
    "\004\002\000\001\002\000\004\010\102\001\002\000\004" +
    "\046\103\001\002\000\004\030\uffef\001\002\000\014\035" +
    "\uffeb\043\035\044\043\045\050\046\110\001\002\000\020" +
    "\011\114\012\113\013\122\014\115\030\121\034\120\035" +
    "\174\001\002\000\004\035\172\001\002\000\020\011\114" +
    "\012\113\013\122\014\115\030\121\034\120\035\117\001" +
    "\002\000\004\035\111\001\002\000\004\030\112\001\002" +
    "\000\024\004\ufff3\005\ufff3\006\ufff3\007\ufff3\031\ufff3\037" +
    "\ufff3\041\ufff3\042\ufff3\047\ufff3\001\002\000\012\034\164" +
    "\043\035\044\043\045\050\001\002\000\012\034\154\043" +
    "\035\044\043\045\050\001\002\000\012\034\144\043\035" +
    "\044\043\045\050\001\002\000\004\035\uffec\001\002\000" +
    "\004\030\141\001\002\000\012\035\uffeb\043\035\044\043" +
    "\045\050\001\002\000\004\035\uffdd\001\002\000\012\034" +
    "\125\043\035\044\043\045\050\001\002\000\016\011\114" +
    "\012\113\013\122\014\115\030\121\034\120\001\002\000" +
    "\016\011\114\012\113\013\122\014\115\030\121\034\120" +
    "\001\002\000\012\035\uffeb\043\035\044\043\045\050\001" +
    "\002\000\016\011\114\012\113\013\122\014\115\030\121" +
    "\034\120\001\002\000\004\035\131\001\002\000\016\011" +
    "\114\012\113\013\122\014\115\030\121\034\120\001\002" +
    "\000\016\011\114\012\113\013\122\014\115\030\121\034" +
    "\120\001\002\000\004\035\uffe0\001\002\000\004\035\uffed" +
    "\001\002\000\004\035\uffe5\001\002\000\004\035\uffe6\001" +
    "\002\000\004\035\137\001\002\000\016\011\114\012\113" +
    "\013\122\014\115\030\121\034\120\001\002\000\004\035" +
    "\uffde\001\002\000\024\004\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\031\ufff4\037\ufff4\041\ufff4\042\ufff4\047\ufff4\001\002\000" +
    "\016\011\114\012\113\013\122\014\115\030\121\034\120" +
    "\001\002\000\016\011\114\012\113\013\122\014\115\030" +
    "\121\034\120\001\002\000\012\035\uffeb\043\035\044\043" +
    "\045\050\001\002\000\004\035\146\001\002\000\016\011" +
    "\114\012\113\013\122\014\115\030\121\034\120\001\002" +
    "\000\004\035\uffdf\001\002\000\004\035\uffe3\001\002\000" +
    "\004\035\uffe4\001\002\000\016\011\114\012\113\013\122" +
    "\014\115\030\121\034\120\001\002\000\016\011\114\012" +
    "\113\013\122\014\115\030\121\034\120\001\002\000\012" +
    "\035\uffeb\043\035\044\043\045\050\001\002\000\004\035" +
    "\156\001\002\000\016\011\114\012\113\013\122\014\115" +
    "\030\121\034\120\001\002\000\004\035\uffe2\001\002\000" +
    "\004\035\uffe9\001\002\000\004\035\uffea\001\002\000\016" +
    "\011\114\012\113\013\122\014\115\030\121\034\120\001" +
    "\002\000\016\011\114\012\113\013\122\014\115\030\121" +
    "\034\120\001\002\000\012\035\uffeb\043\035\044\043\045" +
    "\050\001\002\000\004\035\166\001\002\000\016\011\114" +
    "\012\113\013\122\014\115\030\121\034\120\001\002\000" +
    "\004\035\uffe1\001\002\000\004\035\uffe7\001\002\000\004" +
    "\035\uffe8\001\002\000\004\030\173\001\002\000\024\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\031\ufff2\037\ufff2\041\ufff2" +
    "\042\ufff2\047\ufff2\001\002\000\004\030\175\001\002\000" +
    "\024\004\ufff5\005\ufff5\006\ufff5\007\ufff5\031\ufff5\037\ufff5" +
    "\041\ufff5\042\ufff5\047\ufff5\001\002\000\004\010\177\001" +
    "\002\000\004\045\200\001\002\000\004\030\ufff0\001\002" +
    "\000\014\026\042\027\047\044\043\045\050\046\051\001" +
    "\002\000\004\035\203\001\002\000\004\036\204\001\002" +
    "\000\024\004\022\005\014\006\016\007\012\031\015\037" +
    "\ufffb\041\013\042\024\047\021\001\002\000\004\037\206" +
    "\001\002\000\024\004\uffdc\005\uffdc\006\uffdc\007\uffdc\031" +
    "\uffdc\037\uffdc\041\uffdc\042\uffdc\047\uffdc\001\002\000\004" +
    "\010\210\001\002\000\006\026\042\027\047\001\002\000" +
    "\004\030\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\016\005\025\006\017\011\022\013" +
    "\024\001\001\000\004\004\206\001\001\000\002\001\001" +
    "\000\004\004\175\001\001\000\002\001\001\000\004\004" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\035\001\001\000\014\003\033\005" +
    "\025\006\017\011\022\013\024\001\001\000\002\001\001" +
    "\000\014\003\027\005\025\006\017\011\022\013\024\001" +
    "\001\000\014\003\026\005\025\006\017\011\022\013\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\031\005\025\006\017\011\022\013\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\044\014\045\015\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\070\001\001\000" +
    "\004\014\067\001\001\000\004\014\066\001\001\000\004" +
    "\014\065\001\001\000\004\014\064\001\001\000\004\014" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\003\073\005\025\006\017" +
    "\011\022\013\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\076\005\025\006\017\011\022\013\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\104" +
    "\007\105\014\106\001\001\000\004\010\132\001\001\000" +
    "\002\001\001\000\004\010\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\161\014" +
    "\162\001\001\000\006\004\151\014\152\001\001\000\006" +
    "\004\141\014\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\125\007\135\014\127\001\001\000\002" +
    "\001\001\000\006\004\122\014\123\001\001\000\004\010" +
    "\134\001\001\000\004\010\133\001\001\000\010\004\125" +
    "\007\126\014\127\001\001\000\004\010\132\001\001\000" +
    "\002\001\001\000\004\010\115\001\001\000\004\010\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\150\001\001\000\004\010\147\001\001\000\010\004\125" +
    "\007\144\014\127\001\001\000\002\001\001\000\004\010" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\160\001\001\000\004\010\157\001" +
    "\001\000\010\004\125\007\154\014\127\001\001\000\002" +
    "\001\001\000\004\010\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\170\001\001" +
    "\000\004\010\167\001\001\000\010\004\125\007\164\014" +
    "\127\001\001\000\002\001\001\000\004\010\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\201\014\045\015\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\204\005\025\006" +
    "\017\011\022\013\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\210\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Declaración de precedencias dentro del código del parser
 /*   precedence left suma, resta;
    precedence left producto, division;
    precedence left y, o;*/

    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MIENTRAS ::= mientras parentesisA SENTENCIA_BOOLEANA parentesisC llaveA CODIGO llaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= DATO_NUMERICO diferenteA DATO_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= tipoStr diferenteA tipoStr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= DATO_NUMERICO igualA DATO_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= tipoStr igualA tipoStr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= DATO_NUMERICO mayorIgual DATO_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= DATO_NUMERICO menorIgual DATO_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= DATO_NUMERICO menorQue DATO_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= DATO_NUMERICO mayorQue DATO_NUMERICO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= DATO_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECISION ::= sino llaveA CODIGO llaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECISION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECISION ::= si parentesisA SENTENCIA_BOOLEANA parentesisC llaveA CODIGO llaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECISION",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERANDO ::= finLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERANDO ::= parentesisA OPERACIONES parentesisC OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERANDO ::= producto parentesisA OPERACIONES parentesisC OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERANDO ::= division parentesisA OPERACIONES parentesisC OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERANDO ::= resta parentesisA OPERACIONES parentesisC OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERANDO ::= suma parentesisA OPERACIONES parentesisC OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERANDO ::= producto DATO_NUMERICO OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERANDO ::= producto ID OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERANDO ::= division DATO_NUMERICO OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERANDO ::= division ID OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // OPERANDO ::= resta DATO_NUMERICO OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // OPERANDO ::= resta ID OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // OPERANDO ::= suma DATO_NUMERICO OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERANDO ::= suma ID OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERACIONES ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERACIONES ::= DATO_NUMERICO OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERACIONES ::= ID OPERANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= bool ID igual DATO_BOOLEANO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= string ID igual tipoStr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= decimal ID igual numeroDecimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= entero ID igual numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IMPRIMIR ::= imprimir parentesisA OPERACIONES parentesisC finLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IMPRIMIR ::= imprimir parentesisA tipoStr parentesisC finLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IMPRIMIR ::= imprimir parentesisA DATO_NUMERICO parentesisC finLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IMPRIMIR ::= imprimir parentesisA ID parentesisC finLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ID ::= letra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DATO_BOOLEANO ::= falso 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO_BOOLEANO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DATO_BOOLEANO ::= verdadero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO_BOOLEANO",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DATO_NUMERICO ::= numeroDecimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO_NUMERICO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DATO_NUMERICO ::= numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DATO_NUMERICO",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODIGO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODIGO ::= DECISION CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODIGO ::= MIENTRAS CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= IMPRIMIR CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= SENTENCIA finLinea CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= funcMain parentesisA parentesisC llaveA CODIGO llaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}



//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 12 06:29:03 CST 2024
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 12 06:29:03 CST 2024
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\010\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\002\000\002\004\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\012\006\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\004\000\002\015\006\000\002\016\004\000" +
    "\002\016\002\000\002\020\012\000\002\021\006\000\002" +
    "\021\002\000\002\022\011\000\002\026\003\000\002\026" +
    "\003\000\002\024\004\000\002\024\003\000\002\025\004" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\027\007\000\002\030\005\000\002" +
    "\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\041\005\001\002\000\004\002\133\001" +
    "\002\000\004\035\006\001\002\000\004\036\007\001\002" +
    "\000\004\037\010\001\002\000\040\004\035\005\014\006" +
    "\011\007\030\030\031\031\037\032\025\033\020\040\ufffa" +
    "\042\040\044\013\045\032\046\016\047\021\050\042\001" +
    "\002\000\004\045\ufff5\001\002\000\040\004\035\005\014" +
    "\006\011\007\030\030\031\031\037\032\025\033\020\040" +
    "\ufffa\042\040\044\013\045\032\046\016\047\021\050\042" +
    "\001\002\000\004\035\124\001\002\000\004\045\ufff7\001" +
    "\002\000\004\045\ufff6\001\002\000\066\004\ufff0\005\ufff0" +
    "\006\ufff0\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\026\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\032\ufff0\033\ufff0\036\ufff0\040\ufff0\042\ufff0\044" +
    "\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\001\002\000\040" +
    "\004\035\005\014\006\011\007\030\030\031\031\037\032" +
    "\025\033\020\040\ufffa\042\040\044\013\045\032\046\016" +
    "\047\021\050\042\001\002\000\004\035\113\001\002\000" +
    "\066\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\026" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\036\ufff1" +
    "\040\ufff1\042\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\001\002\000\004\040\112\001\002\000\040\004\035" +
    "\005\014\006\011\007\030\030\031\031\037\032\025\033" +
    "\020\040\ufffa\042\040\044\013\045\032\046\016\047\021" +
    "\050\042\001\002\000\066\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\033\uffec\036\uffec\040\uffec\042\uffec\044\uffec\045\uffec" +
    "\046\uffec\047\uffec\050\uffec\001\002\000\042\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\036\uffd8\040\uffd8\042\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\001\002\000\042\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\036\uffd9\040" +
    "\uffd9\042\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\050\uffd9" +
    "\001\002\000\052\004\uffd6\005\uffd6\006\uffd6\007\uffd6\011" +
    "\102\012\103\013\107\014\104\030\uffd6\031\uffd6\032\uffd6" +
    "\033\uffd6\036\uffd6\040\uffd6\042\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\047\uffd6\050\uffd6\001\002\000\004\045\ufff4\001\002" +
    "\000\066\004\ufff3\005\ufff3\006\ufff3\007\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\036" +
    "\ufff3\040\ufff3\042\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3" +
    "\050\ufff3\001\002\000\066\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\036\uffed\040\uffed\042\uffed\044\uffed\045\uffed" +
    "\046\uffed\047\uffed\050\uffed\001\002\000\004\045\076\001" +
    "\002\000\066\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\036\uffef\040\uffef\042\uffef\044\uffef\045\uffef\046\uffef\047" +
    "\uffef\050\uffef\001\002\000\004\045\ufff8\001\002\000\040" +
    "\004\035\005\014\006\011\007\030\030\031\031\037\032" +
    "\025\033\020\040\ufffa\042\040\044\013\045\032\046\016" +
    "\047\021\050\042\001\002\000\066\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\036\ufff2\040\ufff2\042\ufff2\044\ufff2" +
    "\045\ufff2\046\ufff2\047\ufff2\050\ufff2\001\002\000\004\035" +
    "\044\001\002\000\040\004\035\005\014\006\011\007\030" +
    "\030\031\031\037\032\025\033\020\040\ufffa\042\040\044" +
    "\013\045\032\046\016\047\021\050\042\001\002\000\066" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\036\uffee\040" +
    "\uffee\042\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee" +
    "\001\002\000\004\040\ufffc\001\002\000\020\030\031\031" +
    "\037\035\045\045\032\046\016\047\021\050\042\001\002" +
    "\000\016\030\031\031\037\045\032\046\016\047\021\050" +
    "\042\001\002\000\020\015\064\016\066\017\063\020\061" +
    "\026\062\027\067\036\uffde\001\002\000\004\036\050\001" +
    "\002\000\004\037\051\001\002\000\040\004\035\005\014" +
    "\006\011\007\030\030\031\031\037\032\025\033\020\040" +
    "\ufffa\042\040\044\013\045\032\046\016\047\021\050\042" +
    "\001\002\000\004\040\053\001\002\000\042\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\040\uffdb\042\uffdb\043\054\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\001\002\000\004\037\056\001\002\000\040" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\040\uffdd\042\uffdd\044\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\001\002\000\040\004\035\005\014\006" +
    "\011\007\030\030\031\031\037\032\025\033\020\040\ufffa" +
    "\042\040\044\013\045\032\046\016\047\021\050\042\001" +
    "\002\000\004\040\060\001\002\000\040\004\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\040" +
    "\uffdc\042\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\001\002\000\016\030\uffe7\031\uffe7\045\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\001\002\000\016\030\uffe6\031\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\001\002\000\016\030\uffe8\031" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\001\002\000\016" +
    "\030\uffea\031\uffea\045\uffea\046\uffea\047\uffea\050\uffea\001" +
    "\002\000\004\036\uffe1\001\002\000\016\030\uffe9\031\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\050\uffe9\001\002\000\016\030" +
    "\uffe5\031\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\001\002" +
    "\000\016\030\031\031\037\045\032\046\016\047\021\050" +
    "\042\001\002\000\004\036\uffdf\001\002\000\020\015\064" +
    "\016\066\017\063\020\061\026\062\027\067\036\uffde\001" +
    "\002\000\004\036\074\001\002\000\004\036\uffe0\001\002" +
    "\000\004\040\ufffd\001\002\000\004\010\ufff9\001\002\000" +
    "\004\010\100\001\002\000\020\030\031\031\037\032\025" +
    "\045\032\046\016\047\021\050\042\001\002\000\040\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\040\uffeb\042\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\001\002\000\020\030\uffd4\031\uffd4\032\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\001\002\000\020\030" +
    "\uffd3\031\uffd3\032\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\001\002\000\020\030\uffd1\031\uffd1\032\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\001\002\000\020\030\031\031\037" +
    "\032\025\045\032\046\016\047\021\050\042\001\002\000" +
    "\042\004\uffd7\005\uffd7\006\uffd7\007\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\036\uffd7\040\uffd7\042\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\001\002\000\020\030\uffd2" +
    "\031\uffd2\032\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\001" +
    "\002\000\042\004\uffd5\005\uffd5\006\uffd5\007\uffd5\030\uffd5" +
    "\031\uffd5\032\uffd5\033\uffd5\036\uffd5\040\uffd5\042\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\001\002\000\004" +
    "\040\ufffb\001\002\000\004\002\000\001\002\000\022\030" +
    "\031\031\037\032\025\034\114\045\032\046\016\047\021" +
    "\050\042\001\002\000\004\045\121\001\002\000\004\036" +
    "\117\001\002\000\004\036\uffce\001\002\000\004\032\120" +
    "\001\002\000\040\004\uffd0\005\uffd0\006\uffd0\007\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\040\uffd0\042\uffd0\044\uffd0" +
    "\045\uffd0\046\uffd0\047\uffd0\050\uffd0\001\002\000\004\034" +
    "\122\001\002\000\004\036\uffcf\001\002\000\004\040\uffff" +
    "\001\002\000\020\030\031\031\037\035\045\045\032\046" +
    "\016\047\021\050\042\001\002\000\004\036\126\001\002" +
    "\000\004\037\127\001\002\000\040\004\035\005\014\006" +
    "\011\007\030\030\031\031\037\032\025\033\020\040\ufffa" +
    "\042\040\044\013\045\032\046\016\047\021\050\042\001" +
    "\002\000\004\040\131\001\002\000\040\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\030\uffda\031\uffda\032\uffda\033\uffda\040" +
    "\uffda\042\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050\uffda" +
    "\001\002\000\004\040\ufffe\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\131\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\021\005\014\006\032\007\023\010\033\011\026\012" +
    "\016\020\011\022\035\024\025\026\040\027\022\001\001" +
    "\000\002\001\001\000\032\003\131\005\014\006\032\007" +
    "\023\010\033\011\026\012\016\020\011\022\035\024\025" +
    "\026\040\027\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\122" +
    "\005\014\006\032\007\023\010\033\011\026\012\016\020" +
    "\011\022\035\024\025\026\040\027\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\110\005\014\006\032\007\023\010\033\011\026\012\016" +
    "\020\011\022\035\024\025\026\040\027\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\104\025\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\074\005\014\006" +
    "\032\007\023\010\033\011\026\012\016\020\011\022\035" +
    "\024\025\026\040\027\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\003\042\005\014\006\032\007\023" +
    "\010\033\011\026\012\016\020\011\022\035\024\025\026" +
    "\040\027\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\023\010\033\011\045\015\046\001\001\000" +
    "\010\007\023\010\033\011\071\001\001\000\006\013\067" +
    "\016\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\051\005\014\006\032\007\023\010\033\011\026" +
    "\012\016\020\011\022\035\024\025\026\040\027\022\001" +
    "\001\000\002\001\001\000\004\021\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\056\005\014\006" +
    "\032\007\023\010\033\011\026\012\016\020\011\022\035" +
    "\024\025\026\040\027\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\023\010\033\011\070" +
    "\001\001\000\002\001\001\000\006\013\067\016\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\023\010" +
    "\033\011\026\024\025\026\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\023\010\033\011\026\024\025\026\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\007\023\010\033" +
    "\011\026\024\025\026\115\030\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\023\010\033\011\045\015\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\003" +
    "\127\005\014\006\032\007\023\010\033\011\026\012\016" +
    "\020\011\022\035\024\025\026\040\027\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    public String RESULT = "";
    public static Semantica sem = new Semantica();
    private Symbol s;

    public void setSemantica(Semantica sem) {
        this.sem = sem;
    }
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONTENIDO ::= EXPRESION 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= v; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONTENIDO ::= comillaDoble letra comillaDoble 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT= v; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTENIDO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMPRIMIR ::= imprimir parentesisA CONTENIDO parentesisC finLinea 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 System.out.println("La impresión de este print es: "+c); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERADORES ::= producto 
            {
              Object RESULT =null;
		 RESULT= "*"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERADORES ::= division 
            {
              Object RESULT =null;
		 RESULT= "/"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERADORES ::= resta 
            {
              Object RESULT =null;
		 RESULT= "-"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERADORES ::= suma 
            {
              Object RESULT =null;
		 RESULT= "+"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERACION ::= OPERADORES EXPRESION 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
            try{
                RESULT= Sintax.sem.operacion(o.toString(), e.toString());
            }catch(ErrorSemantica err){
                System.err.println("Error xd: "+ err.getMessage());
                throw new RuntimeException(err);
            } 

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERANDO ::= VALORES 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= n; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERANDO ::= VALORES OPERACION 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        try{
            RESULT= Sintax.sem.operando(n.toString(), o.toString()); 
        }catch(ErrorSemantica err){
            System.err.println("Error xd: "+ err.getMessage());
            throw new RuntimeException(err);
        }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERANDO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= finLinea 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= OPERANDO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= n; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MIENTRAS ::= cicloMientras parentesisA COMPARACIONES parentesisC llaveA CODIGO llaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MIENTRAS",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECISION_NO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECISION_NO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECISION_NO ::= sino llaveA CODIGO llaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECISION_NO",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECISION ::= si parentesisA COMPARACIONES parentesisC llaveA CODIGO llaveC DECISION_NO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		int pAleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int pAright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object pA = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int pCleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int pCright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object pC = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int lAleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int lAright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object lA = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int lCleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int lCright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object lC = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 System.out.println(s.toString() + pA.toString() + c.toString() + pC.toString() + lA.toString() + " CODIGO "+lC.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECISION",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // COMPARACIONES_II ::= 
            {
              Object RESULT =null;
		 RESULT= ""; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACIONES_II",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // COMPARACIONES_II ::= COMPARADORES VALORES 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                    try{
                        RESULT= Sintax.sem.comparacionII(c.toString(), n.toString()); System.out.println(RESULT);
                    }catch(ErrorSemantica err){
                        System.err.println("Error xd: "+ err.getMessage());
                        throw new RuntimeException(err);
                    } 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACIONES_II",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // COMPARACIONES ::= parentesisA VALORES COMPARACIONES_II parentesisC 
            {
              Object RESULT =null;
		int pAleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int pAright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object pA = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int cIIleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cIIright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object cII = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int pCleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int pCright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object pC = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
                    try{
                        RESULT= Sintax.sem.comparacion(n.toString(), cII.toString()); 
                    }catch(ErrorSemantica err){
                        System.err.println("Error xd: "+ err.getMessage());
                        throw new RuntimeException(err);
                    }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // COMPARACIONES ::= VALORES COMPARACIONES_II 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cIIleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cIIright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object cII = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = Sintax.sem.comparacion(n.toString(),cII.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARACIONES",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERADORES_LOGICOS ::= no 
            {
              Object RESULT =null;
		 RESULT= "!"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERADORES_LOGICOS ::= o 
            {
              Object RESULT =null;
		 RESULT= "|"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERADORES_LOGICOS ::= y 
            {
              Object RESULT =null;
		 RESULT= "&"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES_LOGICOS",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COMPARADORES ::= diferenteA 
            {
              Object RESULT =null;
		 RESULT= "!="; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADORES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COMPARADORES ::= igualA 
            {
              Object RESULT =null;
		 RESULT= "=="; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADORES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COMPARADORES ::= mayorIgual 
            {
              Object RESULT =null;
		 RESULT= ">="; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADORES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMPARADORES ::= menorIgual 
            {
              Object RESULT =null;
		 RESULT= "<="; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADORES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COMPARADORES ::= mayorQue 
            {
              Object RESULT =null;
		 RESULT= ">"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADORES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COMPARADORES ::= menorQue 
            {
              Object RESULT =null;
		 RESULT= "<"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMPARADORES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= TIPO_DATOS IDE igual EXPRESION 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
        try{
            Sintax.sem.verifVariable(d.toString(), i.toString(), e.toString());
        }catch(ErrorSemantica err){
            System.err.println("Error xd: "+ err.getMessage());
            throw new RuntimeException(err);
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALORES ::= VALORES_BOOL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=n; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VALORES ::= letra 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT=n; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VALORES ::= tipoStr 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= n; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VALORES ::= VALORES_NUMERICOS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= n; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALORES_NUMERICOS ::= numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = n; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VALORES_NUMERICOS ::= numeroDecimal 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = n; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VALORES_BOOL ::= falso 
            {
              Object RESULT =null;
		 RESULT= "falso"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES_BOOL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VALORES_BOOL ::= verdadero 
            {
              Object RESULT =null;
		 RESULT = "verdadero"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALORES_BOOL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPO_DATOS ::= bool 
            {
              Object RESULT =null;
		 RESULT= "bool"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPO_DATOS ::= string 
            {
              Object RESULT =null;
		 RESULT= "string"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO_DATOS ::= TIPO_NUMERICOS 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= r.toString(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATOS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO_NUMERICOS ::= decimal 
            {
              Object RESULT =null;
		 RESULT= "decimal"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_NUMERICOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO_NUMERICOS ::= entero 
            {
              Object RESULT =null;
		 RESULT= "entero"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_NUMERICOS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // IDE ::= letra 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT= l; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDE",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CODIGO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CODIGO ::= IMPRIMIR CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CODIGO ::= EXPRESION CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CODIGO ::= MIENTRAS CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= DECISION CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= DECLARACION CODIGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // MAIN ::= funcMain parentesisA parentesisC llaveA CODIGO llaveC 
            {
              Object RESULT =null;
		 Sintax.sem.vaciarTabla(); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("MAIN",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= MAIN EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

